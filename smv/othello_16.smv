MODULE main

DEFINE
  EMPTY := 0;
  BLACK := 1;
  WHITE := 2;

VAR
  board : array 0..3 of array 0..3 of 0..2;
  current_player : 1..2;
  game_state : 0..1;
  turn : 0..16;
  check_row : 0..3;
  check_col : 0..3;
  move_row : 0..3;
  move_col : 0..3;
  state : {finding_move, making_move, next_player, game_over};

INIT
  -- Initial board configuration
  board[0][0] = EMPTY & board[0][1] = EMPTY & board[0][2] = EMPTY & board[0][3] = EMPTY &
  board[1][0] = EMPTY & board[1][1] = WHITE & board[1][2] = BLACK & board[1][3] = EMPTY &
  board[2][0] = EMPTY & board[2][1] = BLACK & board[2][2] = WHITE & board[2][3] = EMPTY &
  board[3][0] = EMPTY & board[3][1] = EMPTY & board[3][2] = EMPTY & board[3][3] = EMPTY &
  current_player = BLACK &
  game_state = 0 &
  turn = 0 &
  check_row = 0 &
  check_col = 0 &
  move_row = 0 &
  move_col = 0 &
  state = finding_move;

DEFINE
  opponent_player := 
    case
      current_player = BLACK : WHITE;
      TRUE : BLACK;
    esac;

  check_row_plus_1 := case check_row <= 2 : check_row + 1; TRUE : 3; esac;
  check_row_plus_2 := case check_row <= 1 : check_row + 2; TRUE : 3; esac;
  check_row_plus_3 := case check_row <= 0 : check_row + 3; TRUE : 3; esac;
  check_row_minus_1 := case check_row >= 1 : check_row - 1; TRUE : 0; esac;
  check_row_minus_2 := case check_row >= 2 : check_row - 2; TRUE : 0; esac;
  check_row_minus_3 := case check_row >= 3 : check_row - 3; TRUE : 0; esac;
  check_col_plus_1 := case check_col <= 2 : check_col + 1; TRUE : 3; esac;
  check_col_plus_2 := case check_col <= 1 : check_col + 2; TRUE : 3; esac;
  check_col_plus_3 := case check_col <= 0 : check_col + 3; TRUE : 3; esac;
  check_col_minus_1 := case check_col >= 1 : check_col - 1; TRUE : 0; esac;
  check_col_minus_2 := case check_col >= 2 : check_col - 2; TRUE : 0; esac;
  check_col_minus_3 := case check_col >= 3 : check_col - 3; TRUE : 0; esac;

  DEFINE
  check_valid_right :=
    (check_col <= 1 &
      board[check_row][check_col_plus_1] = opponent_player &
      board[check_row][check_col_plus_2] = current_player)
    |
    (check_col <= 0 &
      board[check_row][check_col_plus_1] = opponent_player &
      board[check_row][check_col_plus_2] = opponent_player &
      board[check_row][check_col_plus_3] = current_player);

  check_valid_left :=
    (check_col >= 2 &
      board[check_row][check_col_minus_1] = opponent_player &
      board[check_row][check_col_minus_2] = current_player)
    |
    (check_col >= 3 &
      board[check_row][check_col_minus_1] = opponent_player &
      board[check_row][check_col_minus_2] = opponent_player &
      board[check_row][check_col_minus_3] = current_player);

  check_valid_down :=
    (check_row <= 1 &
      board[check_row_plus_1][check_col] = opponent_player &
      board[check_row_plus_2][check_col] = current_player)
    |
    (check_row <= 0 &
      board[check_row_plus_1][check_col] = opponent_player &
      board[check_row_plus_2][check_col] = opponent_player &
      board[check_row_plus_3][check_col] = current_player);

  check_valid_up :=
    (check_row >= 2 &
      board[check_row_minus_1][check_col] = opponent_player &
      board[check_row_minus_2][check_col] = current_player)
    |
    (check_row >= 3 &
      board[check_row_minus_1][check_col] = opponent_player &
      board[check_row_minus_2][check_col] = opponent_player &
      board[check_row_minus_3][check_col] = current_player);

  check_valid_down_right :=
    (check_row <= 1 & check_col <= 1 &
      board[check_row_plus_1][check_col_plus_1] = opponent_player &
      board[check_row_plus_2][check_col_plus_2] = current_player)
    |
    (check_row <= 0 & check_col <= 0 &
      board[check_row_plus_1][check_col_plus_1] = opponent_player &
      board[check_row_plus_2][check_col_plus_2] = opponent_player &
      board[check_row_plus_3][check_col_plus_3] = current_player);

  check_valid_down_left :=
    (check_row <= 1 & check_col >= 2 &
      board[check_row_plus_1][check_col_minus_1] = opponent_player &
      board[check_row_plus_2][check_col_minus_2] = current_player)
    |
    (check_row <= 0 & check_col >= 3 &
      board[check_row_plus_1][check_col_minus_1] = opponent_player &
      board[check_row_plus_2][check_col_minus_2] = opponent_player &
      board[check_row_plus_3][check_col_minus_3] = current_player);

  check_valid_up_right :=
    (check_row >= 2 & check_col <= 1 &
      board[check_row_minus_1][check_col_plus_1] = opponent_player &
      board[check_row_minus_2][check_col_plus_2] = current_player)
    |
    (check_row >= 3 & check_col <= 0 &
      board[check_row_minus_1][check_col_plus_1] = opponent_player &
      board[check_row_minus_2][check_col_plus_2] = opponent_player &
      board[check_row_minus_3][check_col_plus_3] = current_player);

  check_valid_up_left :=
    (check_row >= 2 & check_col >= 2 &
      board[check_row_minus_1][check_col_minus_1] = opponent_player &
      board[check_row_minus_2][check_col_minus_2] = current_player)
    |
    (check_row >= 3 & check_col >= 3 &
      board[check_row_minus_1][check_col_minus_1] = opponent_player &
      board[check_row_minus_2][check_col_minus_2] = opponent_player &
      board[check_row_minus_3][check_col_minus_3] = current_player);

  can_place_at_current_pos :=
    board[check_row][check_col] = EMPTY &
    (
      check_valid_right |
      check_valid_left |
      check_valid_up |
      check_valid_down |
      check_valid_down_right |
      check_valid_down_left |
      check_valid_up_right |
      check_valid_up_left
    );

  any_valid_move_exists :=
    (
      (check_row = 0 & check_col = 0 & can_place_at_current_pos) |
      (check_row = 0 & check_col = 1 & can_place_at_current_pos) |
      (check_row = 0 & check_col = 2 & can_place_at_current_pos) |
      (check_row = 0 & check_col = 3 & can_place_at_current_pos) |
      
      (check_row = 1 & check_col = 0 & can_place_at_current_pos) |
      (check_row = 1 & check_col = 1 & can_place_at_current_pos) |
      (check_row = 1 & check_col = 2 & can_place_at_current_pos) |
      (check_row = 1 & check_col = 3 & can_place_at_current_pos) |
      
      (check_row = 2 & check_col = 0 & can_place_at_current_pos) |
      (check_row = 2 & check_col = 1 & can_place_at_current_pos) |
      (check_row = 2 & check_col = 2 & can_place_at_current_pos) |
      (check_row = 2 & check_col = 3 & can_place_at_current_pos) |
      
      (check_row = 3 & check_col = 0 & can_place_at_current_pos) |
      (check_row = 3 & check_col = 1 & can_place_at_current_pos) |
      (check_row = 3 & check_col = 2 & can_place_at_current_pos) |
      (check_row = 3 & check_col = 3 & can_place_at_current_pos)
    );

TRANS
  next(state) = 
    case
      game_state = 1 : game_over;
      state = finding_move & can_place_at_current_pos : making_move;
      state = finding_move : 
        case
          check_row = 3 & check_col = 3 & !can_place_at_current_pos : next_player;
          TRUE : finding_move;
        esac;

      state = making_move : next_player;
      state = next_player :
        case
          turn >= 16 | (!any_valid_move_exists) : game_over;
          TRUE : finding_move;
        esac;
      state = game_over : game_over;
      TRUE : state;
    esac;

TRANS
  next(turn) = 
    case
      state = next_player : turn + 1;
      TRUE : turn;
    esac;

TRANS
  next(check_row) =
    case
      state = finding_move & !can_place_at_current_pos & check_col = 3 & check_row < 3 : check_row + 1;
      state = next_player : 0;
      TRUE : check_row;
    esac;

TRANS
  next(check_col) =
    case
      state = finding_move & !can_place_at_current_pos & check_col = 3 : 0;
      state = finding_move & !can_place_at_current_pos : check_col + 1;
      state = next_player : 0;
      TRUE : check_col;
    esac;

TRANS
  next(move_row) = 
    case
      state = finding_move & can_place_at_current_pos : check_row;
      TRUE : move_row;
    esac;

TRANS
  next(move_col) = 
    case
      state = finding_move & can_place_at_current_pos : check_col;
      TRUE : move_col;
    esac;

TRANS
  next(current_player) = 
    case
      state = next_player : opponent_player;
      TRUE : current_player;
    esac;

TRANS
  next(game_state) = 
    case
      state = game_over : 1;
      TRUE : game_state;
    esac;

TRANS
  state = making_move -> 
    (next(board[move_row][move_col]) = current_player);

DEFINE
  move_row_plus_1 := case move_row <= 2 : move_row + 1; TRUE : 3; esac;
  move_row_plus_2 := case move_row <= 1 : move_row + 2; TRUE : 3; esac;
  move_row_plus_3 := case move_row <= 0 : move_row + 3; TRUE : 3; esac;

  move_row_minus_1 := case move_row >= 1 : move_row - 1; TRUE : 0; esac;
  move_row_minus_2 := case move_row >= 2 : move_row - 2; TRUE : 0; esac;
  move_row_minus_3 := case move_row >= 3 : move_row - 3; TRUE : 0; esac;

  move_col_plus_1 := case move_col <= 2 : move_col + 1; TRUE : 3; esac;
  move_col_plus_2 := case move_col <= 1 : move_col + 2; TRUE : 3; esac;
  move_col_plus_3 := case move_col <= 0 : move_col + 3; TRUE : 3; esac;

  move_col_minus_1 := case move_col >= 1 : move_col - 1; TRUE : 0; esac;
  move_col_minus_2 := case move_col >= 2 : move_col - 2; TRUE : 0; esac;
  move_col_minus_3 := case move_col >= 3 : move_col - 3; TRUE : 0; esac;

TRANS
  state = making_move -> (
    -- RIGHT
    (move_col <= 2 & board[move_row][move_col_plus_1] = opponent_player & board[move_row][move_col_plus_2] = current_player ->
      next(board[move_row][move_col_plus_1]) = current_player) &
    (move_col <= 1 & board[move_row][move_col_plus_1] = opponent_player & board[move_row][move_col_plus_2] = opponent_player & board[move_row][move_col_plus_3] = current_player ->
      next(board[move_row][move_col_plus_1]) = current_player & next(board[move_row][move_col_plus_2]) = current_player) &

    -- LEFT
    (move_col >= 2 & board[move_row][move_col_minus_1] = opponent_player & board[move_row][move_col_minus_2] = current_player ->
      next(board[move_row][move_col_minus_1]) = current_player) &
    (move_col >= 3 & board[move_row][move_col_minus_1] = opponent_player & board[move_row][move_col_minus_2] = opponent_player & board[move_row][move_col_minus_3] = current_player ->
      next(board[move_row][move_col_minus_1]) = current_player & next(board[move_row][move_col_minus_2]) = current_player) &

    -- DOWN
    (move_row <= 2 & board[move_row_plus_1][move_col] = opponent_player & board[move_row_plus_2][move_col] = current_player ->
      next(board[move_row_plus_1][move_col]) = current_player) &
    (move_row <= 1 & board[move_row_plus_1][move_col] = opponent_player & board[move_row_plus_2][move_col] = opponent_player & board[move_row_plus_3][move_col] = current_player ->
      next(board[move_row_plus_1][move_col]) = current_player & next(board[move_row_plus_2][move_col]) = current_player) &

    -- UP
    (move_row >= 2 & board[move_row_minus_1][move_col] = opponent_player & board[move_row_minus_2][move_col] = current_player ->
      next(board[move_row_minus_1][move_col]) = current_player) &
    (move_row >= 3 & board[move_row_minus_1][move_col] = opponent_player & board[move_row_minus_2][move_col] = opponent_player & board[move_row_minus_3][move_col] = current_player ->
      next(board[move_row_minus_1][move_col]) = current_player & next(board[move_row_minus_2][move_col]) = current_player) &

    -- DOWN RIGHT
    (move_row <= 2 & move_col <= 2 & board[move_row_plus_1][move_col_plus_1] = opponent_player & board[move_row_plus_2][move_col_plus_2] = current_player ->
      next(board[move_row_plus_1][move_col_plus_1]) = current_player) &
    (move_row <= 1 & move_col <= 1 & board[move_row_plus_1][move_col_plus_1] = opponent_player & board[move_row_plus_2][move_col_plus_2] = opponent_player & board[move_row_plus_3][move_col_plus_3] = current_player ->
      next(board[move_row_plus_1][move_col_plus_1]) = current_player & next(board[move_row_plus_2][move_col_plus_2]) = current_player) &

    -- DOWN LEFT
    (move_row <= 2 & move_col >= 2 & board[move_row_plus_1][move_col_minus_1] = opponent_player & board[move_row_plus_2][move_col_minus_2] = current_player ->
      next(board[move_row_plus_1][move_col_minus_1]) = current_player) &
    (move_row <= 1 & move_col >= 3 & board[move_row_plus_1][move_col_minus_1] = opponent_player & board[move_row_plus_2][move_col_minus_2] = opponent_player & board[move_row_plus_3][move_col_minus_3] = current_player ->
      next(board[move_row_plus_1][move_col_minus_1]) = current_player & next(board[move_row_plus_2][move_col_minus_2]) = current_player) &

    -- UP RIGHT
    (move_row >= 2 & move_col <= 2 & board[move_row_minus_1][move_col_plus_1] = opponent_player & board[move_row_minus_2][move_col_plus_2] = current_player ->
      next(board[move_row_minus_1][move_col_plus_1]) = current_player) &
    (move_row >= 3 & move_col <= 1 & board[move_row_minus_1][move_col_plus_1] = opponent_player & board[move_row_minus_2][move_col_plus_2] = opponent_player & board[move_row_minus_3][move_col_plus_3] = current_player ->
      next(board[move_row_minus_1][move_col_plus_1]) = current_player & next(board[move_row_minus_2][move_col_plus_2]) = current_player) &

    -- UP LEFT
    (move_row >= 2 & move_col >= 2 & board[move_row_minus_1][move_col_minus_1] = opponent_player & board[move_row_minus_2][move_col_minus_2] = current_player ->
      next(board[move_row_minus_1][move_col_minus_1]) = current_player) &
    (move_row >= 3 & move_col >= 3 & board[move_row_minus_1][move_col_minus_1] = opponent_player & board[move_row_minus_2][move_col_minus_2] = opponent_player & board[move_row_minus_3][move_col_minus_3] = current_player ->
      next(board[move_row_minus_1][move_col_minus_1]) = current_player & next(board[move_row_minus_2][move_col_minus_2]) = current_player)
  );

TRANS
  state != making_move -> next(board) = board;

LTLSPEC F state = game_over;
LTLSPEC G (state = game_over -> G state = game_over);
LTLSPEC G (state = next_player -> X(current_player != current_player)); 